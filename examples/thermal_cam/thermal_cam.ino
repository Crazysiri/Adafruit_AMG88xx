/***************************************************************************
  This is a library for the AMG88xx GridEYE 8x8 IR camera

  This sketch makes a 64 pixel thermal camera with the GridEYE sensor
  and a 128x128 tft screen https://www.adafruit.com/product/2088

  Designed specifically to work with the Adafruit AMG88 breakout
  ----> http://www.adafruit.com/products/TODO

  These sensors use I2C to communicate. The device's I2C address is 0x69

  Adafruit invests time and resources providing this open source code,
  please support Adafruit andopen-source hardware by purchasing products
  from Adafruit!

  Written by Dean Miller for Adafruit Industries.
  BSD license, all text above must be included in any redistribution
 ***************************************************************************/

#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library
#include <SPI.h>

#include <Wire.h>
#include <Adafruit_AMG88xx.h>

#define TFT_CS     10 //chip select pin for the TFT screen
#define TFT_RST    9  // you can also connect this to the Arduino reset
                      // in which case, set this #define pin to 0!
#define TFT_DC     8

//low range of the sensor (this will be blue on the screen)
#define MINTEMP 22

//high range of the sensor (this will be red on the screen)
#define MAXTEMP 34

//the colors we will be using
const uint16_t camColors[] = {0x001F,
0x001F,0x003F,0x005F,0x007F,0x009F,0x00BF,0x00DF,0x00FF,0x011F,0x013F,
0x015F,0x017F,0x019F,0x01BF,0x01DF,0x01FF,0x021F,0x023F,0x025F,0x027F,
0x029F,0x02BF,0x02DF,0x02FF,0x031F,0x033F,0x035F,0x037F,0x039F,0x03BF,
0x03DF,0x03FF,0x041F,0x043F,0x045F,0x047F,0x049F,0x04BF,0x04DF,0x04FF,
0x051F,0x053F,0x055F,0x057F,0x059F,0x05BF,0x05DF,0x05FF,0x061F,0x063F,
0x065F,0x067F,0x069F,0x06BF,0x06DF,0x06FF,0x071F,0x073F,0x075F,0x077F,
0x079F,0x07BF,0x07DF,0x07FE,0x07FE,0x07FD,0x07FD,0x07FC,0x07FC,0x07FB,
0x07FB,0x07FA,0x07FA,0x07FA,0x07F9,0x07F9,0x07F8,0x07F8,0x07F7,0x07F7,
0x07F6,0x07F6,0x07F5,0x07F5,0x07F4,0x07F4,0x07F3,0x07F3,0x07F2,0x07F2,
0x07F1,0x07F1,0x07F0,0x07F0,0x07EF,0x07EF,0x07EE,0x07EE,0x07ED,0x07ED,
0x07EC,0x07EC,0x07EB,0x07EB,0x07EA,0x07EA,0x07E9,0x07E9,0x07E8,0x07E8,
0x07E8,0x07E7,0x07E7,0x07E6,0x07E6,0x07E5,0x07E5,0x07E4,0x07E4,0x07E3,
0x07E3,0x07E2,0x07E2,0x07E1,0x07E1,0x07E0,0x07E0,0x07E0,0x07E0,0x0FE0,
0x0FE0,0x17E0,0x17E0,0x1FE0,0x1FE0,0x27E0,0x27E0,0x2FE0,0x2FE0,0x37E0,
0x37E0,0x3FE0,0x3FE0,0x47E0,0x47E0,0x47E0,0x4FE0,0x4FE0,0x57E0,0x57E0,
0x5FE0,0x5FE0,0x67E0,0x67E0,0x6FE0,0x6FE0,0x77E0,0x77E0,0x7FE0,0x7FE0,
0x87E0,0x87E0,0x8FE0,0x8FE0,0x97E0,0x97E0,0x9FE0,0x9FE0,0xA7E0,0xA7E0,
0xAFE0,0xAFE0,0xB7E0,0xB7E0,0xBFE0,0xBFE0,0xC7E0,0xC7E0,0xCFE0,0xCFE0,
0xD7E0,0xD7E0,0xD7E0,0xDFE0,0xDFE0,0xE7E0,0xE7E0,0xEFE0,0xEFE0,0xF7E0,
0xF7E0,0xFFC0,0xFFA0,0xFF80,0xFF60,0xFF40,0xFF20,0xFF00,0xFEE0,0xFEC0,
0xFEA0,0xFE80,0xFE60,0xFE40,0xFE20,0xFE00,0xFDE0,0xFDC0,0xFDA0,0xFD80,
0xFD60,0xFD40,0xFD20,0xFD00,0xFCE0,0xFCC0,0xFCA0,0xFC80,0xFC60,0xFC40,
0xFC20,0xFC00,0xFBE0,0xFBC0,0xFBA0,0xFB80,0xFB60,0xFB40,0xFB20,0xFB00,
0xFAE0,0xFAC0,0xFAA0,0xFA80,0xFA60,0xFA40,0xFA20,0xFA00,0xF9E0,0xF9C0,
0xF9A0,0xF980,0xF960,0xF940,0xF920,0xF900,0xF8E0,0xF8C0,0xF8A0,0xF880,
0xF860,0xF840,0xF820,0xF800,0xF800};

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);

Adafruit_AMG88xx amg;
unsigned long delayTime;
float pixels[AMG88xx_PIXEL_ARRAY_SIZE];
uint16_t displayPixelWidth, displayPixelHeight;

void setup() {
  Serial.begin(9600);
    Serial.println(F("AMG88xx thermal camera!"));

    tft.initR(INITR_144GREENTAB);   // initialize a ST7735S chip, black tab
    tft.fillScreen(ST7735_BLACK);

    displayPixelWidth = tft.width() / 8;
    displayPixelHeight = tft.height() / 8;

    tft.setRotation(3);
    
    bool status;
    
    // default settings
    status = amg.begin();
    if (!status) {
        Serial.println("Could not find a valid AMG88xx sensor, check wiring!");
        while (1);
    }
    
    Serial.println("-- Thermal Camera Test --");
    delay(100); // let sensor boot up

}

void loop() {
  //read all the pixels
  amg.readPixels(pixels);

  for(int i=0; i<AMG88xx_PIXEL_ARRAY_SIZE; i++){
    uint8_t colorIndex = map(pixels[i], MINTEMP, MAXTEMP, 0, 255);
    colorIndex = constrain(colorIndex, 0, 255);

    //draw the pixels!
    tft.fillRect(displayPixelWidth * (i % 8), 
      tft.height() - displayPixelHeight * floor(i / 8) - displayPixelHeight, 
        displayPixelWidth, displayPixelHeight, camColors[colorIndex]);
  }
}
